class chatBubble {
    constructor(id, chatID, role) {
        console.log(role + "Bubble: " + id);
        this.id = id;
        this.chatID = chatID;
        this.complete = false;

        this.div = document.createElement('div');
        this.div.className = role;
        this.div.classList.add('bubble');
        this.div.id = this.id;
        let overlay_div = document.createElement('div');
        overlay_div.className = 'overlay_div';
        this.content_div = document.createElement('div');
        this.content_div.className = 'content';

        let translated_div = document.createElement('div');
        translated_div.className = "translated_icon";
        translated_div.innerHTML = translate_svg;

        let circleA = document.createElement('div');
        circleA.className = 'circle A';
        let circleB = document.createElement('div');
        circleB.className = 'circle B';
        let circleC = document.createElement('div');
        circleC.className = 'circle C';

        this.content_div.appendChild(circleA);
        this.content_div.appendChild(circleB);
        this.content_div.appendChild(circleC);

        this.info_div = document.createElement('p');
        this.info_div.className = 'info';
        this.info_div.innerHTML = `model: null, token: 0, price: 0`;

        let avatar_div = document.createElement('div');
        avatar_div.className = 'avatar';
        avatar_div.innerHTML = (role == 'user') ? user_svg : openai_svg;

        let button_div = document.createElement('div');
        button_div.className = 'buttons';

        let copyButton = document.createElement("button");
        copyButton.classList.add("chatBtn");
        copyButton.classList.add("chatCopyBtn");
        copyButton.innerHTML = copy_svg;

        this.chatClipboard = new ClipboardJS(copyButton, {
            text: function () {
                return this.prompt;
            }.bind(this)
        });

        this.chatClipboard.on('success', function (e) {
            let div = this.div;
            div.classList.remove("chatCopied");
            window.requestAnimationFrame(function (time) {
                window.requestAnimationFrame(function (time) {
                    div.classList.add('chatCopied');
                });
            });
            e.clearSelection();
        }.bind(this));

        let deleteButton = document.createElement("button");
        deleteButton.classList.add("chatBtn");
        deleteButton.innerHTML = delete_svg;
        deleteButton.addEventListener('click', this.deleteBubble.bind(this));

        let generateImageButton = document.createElement("button");
        generateImageButton.classList.add("chatBtn");
        generateImageButton.innerHTML = image_svg;
        generateImageButton.addEventListener('click', this.generateImage.bind(this));

        this.translateButton = document.createElement("button");
        this.translateButton.classList.add("chatBtn");
        this.translateButton.innerHTML = translate_svg;
        this.translateButton.addEventListener('click', this.translate.bind(this));

        button_div.appendChild(copyButton);
        button_div.appendChild(this.translateButton);
        if (role == 'assistant') {

            let regenerateButton = document.createElement("button");
            regenerateButton.classList.add("chatBtn");
            regenerateButton.innerHTML = regenerate_svg;
            regenerateButton.addEventListener('click', this.reGenerate.bind(this));

            button_div.appendChild(regenerateButton);
        }
        button_div.appendChild(generateImageButton);
        button_div.appendChild(deleteButton);

        this.div.appendChild(this.content_div);
        this.div.appendChild(translated_div);
        this.div.appendChild(this.info_div);
        this.div.appendChild(overlay_div);
        this.div.appendChild(avatar_div);
        this.div.appendChild(button_div);
    }
    async deleteBubble() {
        this.div.remove();
        bubbleDic[this.id] = undefined;
        await HostObject.deleteBubble(this.id, this.chatID)
    }
    async generateImage() {
        await HostObject.generateImage(this.id, this.chatID);
    }
    async translate() {
        if (!this.complete || this.translating)
            return;

        if (this.translated_content == undefined) {
            this.translating = true;
            this.translateButton.innerHTML = busy_svg;
            this.addClass(this.translateButton, 'rotate');

            let temp_div = document.createElement('div');
            temp_div.innerHTML = this.org_content;
            let result = this.depthTraversal(temp_div);
            let need_translate = [];
            result.forEach(element => {
                need_translate.push(element.innerHTML);
            });
            let translated = await HostObject.translate(JSON.stringify({ contents: need_translate }));
            if (translated.length == result.length) {
                result.forEach((element, index) => {
                    element.innerHTML = translated[index];
                });
                this.translated_content = temp_div.innerHTML;
                temp_div = undefined;
            }

            this.translating = false;
            this.translateButton.innerHTML = translate_svg;
            this.translateButton.classList.remove('rotate');
        }

        if (this.show == 0) {
            if (this.translated_content != undefined) {
                this.content_div.innerHTML = this.translated_content;
                this.show = 1;
                this.div.classList.remove('translating');
                this.addClass(this.div, 'translated');
                window.requestAnimationFrame(function (time) {
                    window.requestAnimationFrame(function (time) {
                        this.addClass(this.div, 'translating');
                    }.bind(this));
                }.bind(this));

            }
        } else {
            this.content_div.innerHTML = this.org_content;
            this.show = 0;
            this.div.classList.remove('translating');
            this.div.classList.remove('translated');
            window.requestAnimationFrame(function (time) {
                window.requestAnimationFrame(function (time) {
                    this.addClass(this.div, 'translating');
                }.bind(this));
            }.bind(this));
        }

        this.content_div.querySelectorAll('.math').forEach((el) => {
            renderMathInElement(el);
        });
        this.content_div.querySelectorAll('pre code').forEach((el) => {
            hljs.highlightElement(el);
        });
        this.creatCopyButton();
    }
    depthTraversal(div) {
        let childNodes = div.childNodes;
        let result = [];
        childNodes.forEach(element => {
            if (element.nodeName != 'PRE') {
                if (element.innerText != undefined && element.innerText != "")
                    result.push(element);
                else
                    if (element.children && element.children.length) {
                        let childResult = this.depthTraversal(element);
                        if (childResult.length)
                            result = result.concat(childResult);
                    }
            }
        });
        return result;
    }
    async reGenerate() {
        if (!this.complete || this.translating)
            return;

        this.div.classList.remove('FAILED', 'PENDING', 'COMPLETE');
        this.content_div.innerHTML = '';
        this.info_div.innerHTML = `model: null, token: 0, price: 0`;

        this.org_content = undefined;
        this.complete = false;

        this.div.classList.remove('translating');
        this.div.classList.remove('translated');
        this.translated_content = undefined;
        this.show = 0;
        this.translating = false;

        let circleA = document.createElement('div');
        circleA.className = 'circle A';
        let circleB = document.createElement('div');
        circleB.className = 'circle B';
        let circleC = document.createElement('div');
        circleC.className = 'circle C';

        this.content_div.appendChild(circleA);
        this.content_div.appendChild(circleB);
        this.content_div.appendChild(circleC);


        RefreshScroll(this.div, this.chatID, true, "both");

        await HostObject.regenerate(this.id, this.chatID)
    }
    update(msg) {
        let content = msg['content'];
        if (content != undefined) {
            this.content_div.innerHTML = content;
            this.org_content = content;

            this.content_div.querySelectorAll('.math').forEach((el) => {
                renderMathInElement(el);
            });
            this.content_div.querySelectorAll('pre code').forEach((el) => {
                hljs.highlightElement(el);
            });
        }

        this.token = msg['token'];
        this.model = msg['model'];
        this.price = msg['price'];
        this.info_div.innerHTML = `model: ${this.model}, token: ${this.token}, price: ${parseFloat(this.price.toFixed(4))}&#65504`;

        let message = msg['org_message'];
        if (message != undefined)
            this.prompt = message['Content'] ?? this.prompt;

        let status = msg['status'];
        this.complete = status == 'COMPLETE';
        if (this.complete)
            this.creatCopyButton();

        this.div.classList.remove('FAILED', 'PENDING', 'COMPLETE');
        this.addClass(this.div, status);

        this.div.classList.remove('translating');
        this.div.classList.remove('translated');
        this.translated_content = undefined;
        this.show = 0;
        this.translating = false;

        RefreshScroll(this.div, this.chatID, false, "bottom");
    }
    creatCopyButton() {
        let area = this.div;

        let allpre = area.getElementsByTagName("pre");
        if (allpre.length < 1)
            return;
        Array.from(allpre).forEach(element => {
            element.style.position = "relative";
            let copyButton = document.createElement("button");
            copyButton.classList.add("codeCopyBtn");
            copyButton.innerHTML = '<svg t="1681377373602" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2626" width="20px" height="20px"><path d="M661.333333 234.666667A64 64 0 0 1 725.333333 298.666667v597.333333a64 64 0 0 1-64 64h-469.333333A64 64 0 0 1 128 896V298.666667a64 64 0 0 1 64-64z m-21.333333 85.333333H213.333333v554.666667h426.666667v-554.666667z m191.829333-256a64 64 0 0 1 63.744 57.856l0.256 6.144v575.701333a42.666667 42.666667 0 0 1-85.034666 4.992l-0.298667-4.992V149.333333H384a42.666667 42.666667 0 0 1-42.368-37.674666L341.333333 106.666667a42.666667 42.666667 0 0 1 37.674667-42.368L384 64h447.829333z" fill="#aeaeae" p-id="2627"></path></svg>';
            element.appendChild(copyButton)
        });
    }
    addClass(element, className) {
        if (!element.classList.contains(className))
            element.classList.add(className);
    }
}